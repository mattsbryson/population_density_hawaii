d3.geoTransverseMercator().rotate([158,-21]).fitSize([960,960])

ndjson-split 'd.features' \
  < hw-albers.json \
  > hw-albers.ndjson

ndjson-split 'd.features' \ < hw-albers.json \ > hw-albers.ndjson

ndjson-map 'd.id = d.properties.GEOID.slice(2), d' < hw-albers.ndjson > hw-albers-id.ndjson

curl 'https://api.census.gov/data/2014/acs5?get=B01003_001E&for=tract:*&in=state:15' -o cb_2014_15_tract_B01003.json

ndjson-cat cb_2014_15_tract_B01003.json | ndjson-split 'd.slice(1)' | ndjson-map '{id: d[2] + d[3], B01003: +d[0]}' > cb_2014_15_tract_B01003.ndjson
  
ndjson-join 'd.id' hw-albers-id.ndjson cb_2014_15_tract_B01003.ndjson > hw-albers-join.ndjson

ndjson-map 'd[0].properties = {density: Math.floor(d[1].B01003 / d[0].properties.ALAND * 2589975.2356)}, d[0]' < hw-albers-join.ndjson > hw-albers-density.ndjson

ndjson-reduce < hw-albers-density.ndjson | ndjson-map '{type: "FeatureCollection", features: d}' > hw-albers-density.json

ndjson-map -r d3 '(d.properties.fill = d3.scaleSequential(d3.interpolateViridis).domain([0, 4000])(d.properties.density), d)' < hw-albers-density.ndjson > hw-albers-color.ndjson

geo2svg -n --stroke none -p 1 -w 960 -h 960 < hw-albers-color.ndjson > hw-albers-color.svg

geo2topo -n tracts=hw-albers-density.ndjson > hw-tracts-topo.json

toposimplify -p 1 -f < hw-tracts-topo.json > hw-simple-topo.json

topoquantize 1e5 < hw-simple-topo.json > hw-quantized-topo.json

topomerge -k 'd.id.slice(0, 3)' counties=tracts < hw-quantized-topo.json > hw-merge-topo.json

topomerge --mesh -f 'a !== b' counties=counties < hw-merge-topo.json > hw-topo.json

topo2geo tracts=- < hw-topo.json | ndjson-map -r d3 'z = d3.scaleSequential(d3.interpolateViridis).domain([0, 4000]), d.features.forEach(f => f.properties.fill = z(f.properties.density)), d' | ndjson-split 'd.features' | geo2svg -n --stroke none -p 1 -w 960 -h 960 > hw-tracts-color.svg

topo2geo tracts=- < hw-topo.json | ndjson-map -r d3 'z = d3.scaleSequential(d3.interpolateViridis).domain([0, 100]), d.features.forEach(f => f.properties.fill = z(Math.sqrt(f.properties.density))), d' | ndjson-split 'd.features' | geo2svg -n --stroke none -p 1 -w 960 -h 960 > hw-tracts-sqrt.svg

topo2geo tracts=- < hw-topo.json | ndjson-map -r d3 'z = d3.scaleLog().domain(d3.extent(d.features.filter(f => f.properties.density), f => f.properties.density)).interpolate(() => d3.interpolateViridis), d.features.forEach(f => f.properties.fill = z(f.properties.density)), d' | ndjson-split 'd.features' | geo2svg -n --stroke none -p 1 -w 960 -h 960 > hw-tracts-log.svg

topo2geo tracts=- < hw-topo.json | ndjson-map -r d3 'z = d3.scaleQuantile().domain(d.features.map(f => f.properties.density)).range(d3.quantize(d3.interpolateViridis, 256)), d.features.forEach(f => f.properties.fill = z(f.properties.density)), d' | ndjson-split 'd.features' | geo2svg -n --stroke none -p 1 -w 960 -h 960 > hw-tracts-quantile.svg

topo2geo tracts=- < hw-topo.json | ndjson-map -r d3 -r d3=d3-scale-chromatic 'z = d3.scaleThreshold().domain([1, 10, 50, 200, 500, 1000, 2000, 4000]).range(d3.schemeOrRd[9]), d.features.forEach(f => f.properties.fill = z(f.properties.density)), d' | ndjson-split 'd.features' | geo2svg -n --stroke none -p 1 -w 960 -h 960 > hw-tracts-threshold.svg